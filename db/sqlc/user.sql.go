// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    email, full_name, phone_number, role, avatar_url
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, email, full_name, phone_number, role, avatar_url, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	Email       string      `json:"email"`
	FullName    pgtype.Text `json:"full_name"`
	PhoneNumber pgtype.Text `json:"phone_number"`
	Role        string      `json:"role"`
	AvatarUrl   pgtype.Text `json:"avatar_url"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.FullName,
		arg.PhoneNumber,
		arg.Role,
		arg.AvatarUrl,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.PhoneNumber,
		&i.Role,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, full_name, phone_number, role, avatar_url, created_at, updated_at, deleted_at FROM users WHERE email = $1 AND deleted_at IS NULL
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.PhoneNumber,
		&i.Role,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, full_name, phone_number, role, avatar_url, created_at, updated_at, deleted_at FROM users WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.PhoneNumber,
		&i.Role,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserWithMetadata = `-- name: GetUserWithMetadata :one
SELECT 
  u.id, u.email, u.full_name, u.phone_number, u.role, u.avatar_url, u.created_at, u.updated_at, u.deleted_at, 
  m.metadata
FROM users u
LEFT JOIN user_metadata m ON m.user_id = u.id
WHERE u.id = $1 AND u.deleted_at IS NULL
`

type GetUserWithMetadataRow struct {
	ID          uuid.UUID          `json:"id"`
	Email       string             `json:"email"`
	FullName    pgtype.Text        `json:"full_name"`
	PhoneNumber pgtype.Text        `json:"phone_number"`
	Role        string             `json:"role"`
	AvatarUrl   pgtype.Text        `json:"avatar_url"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	DeletedAt   pgtype.Timestamptz `json:"deleted_at"`
	Metadata    []byte             `json:"metadata"`
}

func (q *Queries) GetUserWithMetadata(ctx context.Context, id uuid.UUID) (GetUserWithMetadataRow, error) {
	row := q.db.QueryRow(ctx, getUserWithMetadata, id)
	var i GetUserWithMetadataRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.PhoneNumber,
		&i.Role,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Metadata,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, full_name, phone_number, role, avatar_url, created_at, updated_at, deleted_at
FROM users
WHERE deleted_at IS NULL
  AND (
    LOWER(email) LIKE LOWER('%' || $1 || '%')
    OR LOWER(full_name) LIKE LOWER('%' || $1 || '%')
  )
ORDER BY created_at DESC
LIMIT $3 OFFSET $2
`

type ListUsersParams struct {
	Search pgtype.Text `json:"search"`
	Offset int32       `json:"offset"`
	Limit  int32       `json:"limit"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Search, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.FullName,
			&i.PhoneNumber,
			&i.Role,
			&i.AvatarUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
